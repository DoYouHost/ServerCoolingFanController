---
substitutions:
  API_KEY: "Zeikx9TPIaEuYCmaC4EgAf93MsP946vpPf0hzGjFdM0="
  OTA_PASSWORD: "dZDYhrmYcxn_M7ih0@_W9r5jbbkaD4gk"
  DS18B20_1_ADDRESS: "0x1b3c44e3817b6e28"
  DS18B20_2_ADDRESS: "0xc63a904d1f64ff28"
  ERROR_COUNT_TRIGGER: "6"
  PROD_MANIFEST_URL: "https://morganmlg.com/serverCoolingFanController/manifest.json"
  BETA_MANIFEST_URL: "https://morganmlg.com/serverCoolingFanController/manifest-beta.json"
  WEB_USERNAME: "esphome"
  WEB_PASSWORD: "esphome"

esphome:
  name: server-cooling-fan
  friendly_name: "Server Cooling Fan"
  comment: "WT32-ETH01 fan controller with temperature sensors"
  name_add_mac_suffix: true
  project:
    name: "DoYouHost.ServerCoolingFanController"
    version: "dev"

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

globals:
  - id: cabinet_fan_commanded
    type: bool
    initial_value: 'false'
  - id: rack_fan_commanded
    type: bool
    initial_value: 'false'
  - id: cabinet_fan_error_count
    type: int
    initial_value: '0'
  - id: rack_fan_error_count
    type: int
    initial_value: '0'
  - id: cabinet_fan_runtime_hours
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: rack_fan_runtime_hours
    type: float
    restore_value: true
    initial_value: '0.0'

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk:
    pin: GPIO0
    mode: CLK_EXT_IN
  phy_addr: 1
  power_pin: GPIO16

debug:
  update_interval: 5s

logger:
  level: DEBUG

safe_mode:

api:
  reboot_timeout: 30min
  batch_delay: 50ms
  encryption:
    key: "$API_KEY"

http_request:

ota:
  - platform: esphome
    password: "$OTA_PASSWORD"
  - platform: http_request

update:
  - platform: http_request
    id: update_http_request
    name: Firmware Update
    source: $PROD_MANIFEST_URL

web_server:
  port: 80
  version: 3
  include_internal: true
  local: true
  auth:
    username: "$WEB_USERNAME"
    password: "$WEB_PASSWORD"

one_wire:
  - platform: gpio
    pin: GPIO4

i2c:
  sda: GPIO14
  scl: GPIO15
  scan: true
  id: bus_a

pcf8574:
  - id: pcf8574_hub
    address: 0x20
    pcf8575: false

time:
  - platform: homeassistant
    id: homeassistant_time

interval:
  - interval: 5s
    then:
      - lambda: |-
          // Cabinet fan
          bool cabinet_running = id(cabinet_fan).state;
          id(cabinet_fan_commanded) = cabinet_running;

          if (cabinet_running) {
            // Increment runtime hours (5 seconds = 5/3600 hours)
            id(cabinet_fan_runtime_hours) += (5.0 / 3600.0);

            if (id(cabinet_fan_tach).state == 0 ||
                id(cabinet_fan2_tach).state == 0) {
              id(cabinet_fan_error_count) += 1;
            } else {
              id(cabinet_fan_error_count) = 0; // Reset counter if working
            }
          } else {
            id(cabinet_fan_error_count) = 0; // Reset when fan is off
          }

          // Rack fan
          bool rack_running = id(rack_fan).state;
          id(rack_fan_commanded) = rack_running;

          if (rack_running) {
            // Increment runtime hours (5 seconds = 5/3600 hours)
            id(rack_fan_runtime_hours) += (5.0 / 3600.0);

            if (id(rack_fan_tach).state == 0 || id(rack_fan2_tach).state == 0) {
              id(rack_fan_error_count) += 1;
            } else {
              id(rack_fan_error_count) = 0; // Reset counter if fans are working
            }
          } else {
            id(rack_fan_error_count) = 0; // Reset when fan is off
          }

text_sensor:
  - platform: version
    name: ESPHome Version
    entity_category: "diagnostic"

  - platform: ethernet_info
    ip_address:
      entity_category: "diagnostic"
      name: IP Address
    dns_address:
      entity_category: "diagnostic"
      name: DNS Address
    mac_address:
      entity_category: "diagnostic"
      name: MAC Address

  - platform: template
    id: fan_error_explanation
    name: "Fan Error Details"
    lambda: |-
      std::string error_msg = "No errors";
      bool has_error = false;

      // Cabinet fans
      if (id(cabinet_fan_commanded) &&
          id(cabinet_fan_error_count) >= $ERROR_COUNT_TRIGGER) {
        if (id(cabinet_fan_tach).state == 0) {
          error_msg = has_error ? error_msg + ", Cabinet Fan 1 not responding" :
                      "Cabinet Fan 1 not responding";
          has_error = true;
        }
        if (id(cabinet_fan2_tach).state == 0) {
          error_msg = has_error ? error_msg + ", Cabinet Fan 2 not responding" :
                      "Cabinet Fan 2 not responding";
          has_error = true;
        }
      }

      // Rack fans
      if (id(rack_fan_commanded) &&
          id(rack_fan_error_count) >= $ERROR_COUNT_TRIGGER) {
        if (id(rack_fan_tach).state == 0) {
          error_msg = has_error ? error_msg + ", Rack Fan 1 not responding" :
                      "Rack Fan 1 not responding";
          has_error = true;
        }
        if (id(rack_fan2_tach).state == 0) {
          error_msg = has_error ? error_msg + ", Rack Fan 2 not responding" :
                      "Rack Fan 2 not responding";
          has_error = true;
        }
      }

      return error_msg;
    update_interval: 5s

binary_sensor:
  - platform: status
    id: esp_status
    name: Status
    device_class: connectivity

  - platform: gpio
    id: manual_override_button
    name: "Manual Override Button"
    pin:
      number: GPIO39
      inverted: true
    filters:
      - delayed_on: 50ms
      - delayed_off: 50ms
    on_press:
      then:
        - fan.turn_on:
            id: cabinet_fan
            speed: 10
        - fan.turn_on:
            id: rack_fan
            speed: 10
        - logger.log: "Manual override activated - fans at full speed"
    on_release:
      then:
        - fan.turn_off: cabinet_fan
        - fan.turn_off: rack_fan
        - logger.log: "Manual override released - fans turned off"

  - platform: template
    id: fan_error
    name: "Fan Error"
    device_class: problem
    lambda: |-
      return (id(cabinet_fan_error_count) >= $ERROR_COUNT_TRIGGER) ||
             (id(rack_fan_error_count) >= $ERROR_COUNT_TRIGGER);
    on_state:
      then:
        - lambda: |-
            if (x) {
              id(my_display).show_page(id(error_page));
              id(error_led).turn_on().set_effect("Error Strobe").perform();
            } else {
              id(my_display).show_page(id(normal_page));
              id(error_led).turn_off().perform();
            }
        - component.update: my_display

sensor:
  - platform: uptime
    name: Uptime
    update_interval: 60s
    accuracy_decimals: 0
    icon: mdi:clock-outline
    entity_category: "diagnostic"

  - platform: debug
    loop_time:
      name: "Loop Time"
    cpu_frequency:
      name: "CPU Frequency"
      unit_of_measurement: "MHz"
      filters:
        - multiply: 0.000001

  - platform: internal_temperature
    id: internal_temp
    name: "Internal Temperature"
    update_interval: 60s

  - platform: dallas_temp
    id: cabinet_temp
    address: $DS18B20_1_ADDRESS
    name: "Cabinet Temperature"
    update_interval: 30s
    accuracy_decimals: 1
    icon: mdi:thermometer

  - platform: dallas_temp
    id: rack_temp
    address: $DS18B20_2_ADDRESS
    name: "Rack Temperature"
    update_interval: 30s
    accuracy_decimals: 1
    icon: mdi:thermometer

  - platform: pulse_meter
    id: cabinet_fan_tach
    name: "Cabinet Fan RPM"
    pin:
      number: GPIO32
    filters:
      - throttle_average: 3s
      - multiply: 0.5
      - clamp:
          min_value: 0
          max_value: 10000
          ignore_out_of_range: true
    timeout: 10s
    unit_of_measurement: rpm
    accuracy_decimals: 0
    icon: mdi:fan

  - platform: pulse_meter
    id: rack_fan_tach
    name: "Rack Fan RPM"
    pin:
      number: GPIO33
    filters:
      - throttle_average: 3s
      - multiply: 0.5
      - clamp:
          min_value: 0
          max_value: 10000
          ignore_out_of_range: true
    timeout: 10s
    unit_of_measurement: rpm
    accuracy_decimals: 0
    icon: mdi:fan

  - platform: pulse_meter
    id: cabinet_fan2_tach
    name: "Cabinet Fan 2 RPM"
    pin:
      number: GPIO35
    filters:
      - throttle_average: 3s
      - multiply: 0.5
      - clamp:
          min_value: 0
          max_value: 10000
          ignore_out_of_range: true
    timeout: 10s
    unit_of_measurement: rpm
    accuracy_decimals: 0
    icon: mdi:fan

  - platform: pulse_meter
    id: rack_fan2_tach
    name: "Rack Fan 2 RPM"
    pin:
      number: GPIO36
    filters:
      - throttle_average: 3s
      - multiply: 0.5
      - clamp:
          min_value: 0
          max_value: 10000
          ignore_out_of_range: true
    timeout: 10s
    unit_of_measurement: rpm
    accuracy_decimals: 0
    icon: mdi:fan

  - platform: template
    id: cabinet_fan_runtime_sensor
    name: "Cabinet Fan Runtime Hours"
    lambda: |-
      return id(cabinet_fan_runtime_hours);
    update_interval: 60s
    unit_of_measurement: "h"
    accuracy_decimals: 1
    icon: mdi:clock-outline
    entity_category: "diagnostic"

  - platform: template
    id: rack_fan_runtime_sensor
    name: "Rack Fan Runtime Hours"
    lambda: |-
      return id(rack_fan_runtime_hours);
    update_interval: 60s
    unit_of_measurement: "h"
    accuracy_decimals: 1
    icon: mdi:clock-outline
    entity_category: "diagnostic"

button:
  - platform: restart
    id: restart_button
    name: Restart

  - platform: safe_mode
    id: safe_mode_button
    name: Safe Mode

  - platform: factory_reset
    id: factory_reset_button
    name: Factory Reset

  - platform: template
    id: reset_fan_runtime
    name: "Reset Fan Runtime"
    icon: mdi:counter
    entity_category: "config"
    on_press:
      then:
        - lambda: |-
            id(cabinet_fan_runtime_hours) = 0.0;
            id(rack_fan_runtime_hours) = 0.0;
        - logger.log: "Fan runtime counter reset to 0 hours"
        - component.update: cabinet_fan_runtime_sensor
        - component.update: rack_fan_runtime_sensor

  - platform: template
    id: check_for_updates
    name: "Check for Updates"
    icon: mdi:update
    entity_category: "config"
    on_press:
      then:
        - component.update: update_http_request

switch:
  - platform: template
    name: Beta Firmware
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: "mdi:test-tube"
    entity_category: config
    on_turn_on:
      - logger.log: "OTA updates set to use Beta firmware"
      - lambda: id(update_http_request).set_source_url("$BETA_MANIFEST_URL");
      - component.update: update_http_request
    on_turn_off:
      - logger.log: "OTA updates set to use Production firmware"
      - lambda: id(update_http_request).set_source_url("$PROD_MANIFEST_URL");
      - component.update: update_http_request

power_supply:
  - id: power_supply_fan
    pin:
      pcf8574: pcf8574_hub
      number: 1
      mode:
        output: true
      inverted: false
    enable_time: 20ms
    keep_on_time: 20ms

output:
  - platform: ledc
    id: cabinet_fan_output
    pin: GPIO5
    frequency: 19531
    min_power: 0.6
    zero_means_zero: true

  - platform: ledc
    id: rack_fan_output
    pin: GPIO17
    frequency: 19531
    min_power: 0.0
    zero_means_zero: true
    power_supply: power_supply_fan

  - platform: gpio
    id: error_led_output
    pin:
      pcf8574: pcf8574_hub
      number: 2
      mode:
        output: true
      inverted: true

fan:
  - platform: speed
    id: cabinet_fan
    output: cabinet_fan_output
    name: "Cabinet Fan"
    restore_mode: RESTORE_DEFAULT_OFF
    speed_count: 10

  - platform: speed
    id: rack_fan
    output: rack_fan_output
    name: "Rack Fan"
    restore_mode: RESTORE_DEFAULT_OFF
    speed_count: 10

light:
  - platform: binary
    id: error_led
    internal: true
    output: error_led_output
    restore_mode: RESTORE_DEFAULT_OFF
    effects:
      - strobe:
          name: "Error Strobe"
          colors:
            - state: True
              brightness: 100%
              duration: 200ms
            - state: False
              brightness: 0%
              duration: 200ms

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: my_display
    update_interval: 3s
    pages:
      - id: normal_page
        lambda: |-
          // Cabinet Section
          it.print(0, 0, id(font2), "Cabinet:");
          it.printf(0, 10, id(font2), "%.0f RPM", id(cabinet_fan_tach).state);
          it.printf(0, 20, id(font2), "%.0f RPM", id(cabinet_fan2_tach).state);
          it.printf(0, 30, id(font2), "%.1f°C", id(cabinet_temp).state);

          // Rack Section
          it.print(64, 0, id(font2), "Rack:");
          it.printf(64, 10, id(font2), "%.0f RPM", id(rack_fan_tach).state);
          it.printf(64, 20, id(font2), "%.0f RPM", id(rack_fan2_tach).state);
          it.printf(64, 30, id(font2), "%.1f°C", id(rack_temp).state);

          // System info
          it.line(0, 42, 128, 42);
          it.printf(0, 46, id(font2), "CPU: %.1f°C",
                    id(internal_temp).state);

      - id: error_page
        lambda: |-
          it.print(0, 0, id(font1), "FAN ERROR!");
          it.line(0, 12, 128, 12);

          // Temperature status
          it.printf(0, 16, id(font2), "Cabinet: %.1f°C",
                    id(cabinet_temp).state);
          it.printf(0, 26, id(font2), "Rack: %.1f°C", id(rack_temp).state);
          it.printf(0, 36, id(font2), "CPU: %.1f°C", id(internal_temp).state);

          // Error details
          it.line(0, 44, 128, 44);
          int error_line = 48;

          if (id(cabinet_fan_commanded) && id(cabinet_fan_error_count) >= 6) {
            if (id(cabinet_fan_tach).state == 0) {
              it.print(0, error_line, id(font2), "Cabinet Fan 1 FAIL");
              error_line += 8;
            }
            if (id(cabinet_fan2_tach).state == 0) {
              it.print(0, error_line, id(font2), "Cabinet Fan 2 FAIL");
              error_line += 8;
            }
          }

          if (id(rack_fan_commanded) && id(rack_fan_error_count) >= 6) {
            if (id(rack_fan_tach).state == 0) {
              it.print(0, error_line, id(font2), "Rack Fan 1 FAIL");
              error_line += 8;
            }
            if (id(rack_fan2_tach).state == 0) {
              it.print(0, error_line, id(font2), "Rack Fan 2 FAIL");
              error_line += 8;
            }
          }

font:
  - file: "gfonts://Roboto"
    id: font1
    size: 10
  - file: "gfonts://Roboto"
    id: font2
    size: 8

status_led:
  pin:
    pcf8574: pcf8574_hub
    number: 0
    mode:
      output: true
    inverted: false